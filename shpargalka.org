#+STARTUP: showall indent hidestars


* Chapter 3
** Page 55

Функция принимает параметр x. Проверяет, является ли он ячейкой.
Если да, то вызывает фнкцию compr, котораяпринимает 3 параметра:
последний повстречавшийся элемент, число его повторений и
остаток списка. Если же X ячейкой не является, мы просто
вернем его.


#+BEGIN_SRC lisp

  (defun compress (x)
    (if (consp x)
        (compr (car x) 1 (cdr x))
        x))

#+END_SRC


Функция compr должна вернуть нам сжатое продставление списка.
Сначала проверяем, не пустой ли остаток нашего списка (lst).
Если пустой, то вызываем n-elts, которая сожмет наш список. Если
lst не пустой, то мы берем первый элемент списка и записываем его
в локальную переменную next. Смотрим, одинаков ли первый элемент
списка и переменная. Если да, то рекурсивно вызываем compr,
инкрементировав n и в качестве lst подставив его остаток.
Если next и первый элемент списка не равны, то вызываем n-elts и
результат записываем в новый список. А потом снова рекурсивно
вызываем compr, чтоб проверить остальные элементы списка.

#+BEGIN_SRC lisp

  (defun compr (elt n lst)
    (if (null lst)
        (list (n-elts elt n))
        (let ((next (car lst)))
          (if (eql next elt)
              (compr elt (+ n 1) (cdr lst))
              (cons (n-elts elt n)
                    (compr next 1 (cdr lst)))))))

#+END_SRC

Функция n-elts проверяет, встретился ли элемент более одного раза.
Если да, то формируется новый список, который показыаает
сколько раз встретился элемент. Если элемент встретился один или
менее раз, то мы просто его возвращаем.

#+BEGIN_SRC lisp

  (defun n-elts (elt n)
    (if (> n 1)
        (list n elt)
        elt))
#+END_SRC
** Page 56

Досмотреть. Какая-то ерунда получилась.

Функция uncompress превращает сжатый список в исходный. Параметр:
список.
Сначала проверяем, не пустой ли список. Если пустой, возвращаем nil.
Если нет, загружаем первый элемент списка в переменную elt и
рекурсивно вызываем фунцию с остатком списка, а rest предоставит нам
остаток от остатка списка (cdr(cdr lst)).
Если elt ячейка, то вызываем list-of с elt (сколько раз повторяется
элемент?) и rest - остаток списка. Apply вернет результат вызова
функции, а append склеит результат в один список. Если же elt не
является ячейкой, то мы создадим новый список.


#+BEGIN_SRC lisp

  (defun uncompress (lst)
    (if (null lst)
        nil
        (let ((elt (car lst))
              (rest (uncompress (cdr lst))))
          (if (consp elt)
              (append (apply #’list-of elt)
                      rest)
              (cons elt rest)))))

#+END_SRC

Функция list-of формирует список. Если n ноль, то мы возвращаем nil,
в противном случае рекурсивно вызываем функцию и формируем новый
список.

#+BEGIN_SRC lisp

  (defun list-of (n elt)
    (if (zerop n)
        nil
        (cons elt (list-of (- n 1) elt))))

#+END_SRC

** Page 67

Функция должна выдать нам пару для key в заданном ассоциативном
списке (списке из точечных пар).

#+BEGIN_SRC lisp

(defun our-assoc (key alist)
(and (consp alist)
(let ((pair (car alist)))
(if (eql key (car pair))
pair
(our-assoc key (cdr alist))))))

#+END_SRC

Если alist - это ячейка, тогда мы присваиваем локальной переменной
pair первую пару списка. Если key = первому элементу списка, то
возвращаем пару. Если нет, то рекурсивно вызываем функцию с key
и остатком списка. Если список кончится, а мы ничего не нашли,
вернем nil.



** Page 68

Функция должна найти крайтчайший путь к элементу.
shortest-path принимает 3 аргумента: начальную и конченую точки,
саму сеть. Она передает функции bfs конечную точку, начальную
точку, представленную в виде списка (зачем 2 раза оборачивать?) и
саму сеть.

#+BEGIN_SRC lisp

  (defun shortest-path (start end net)
    (bfs end (list (list start)) net))

#+END_SRC

Bfs принимает 3 аргумента: конечную точку, "очередь" и саму сеть.
Затем мы проверяем, является очередь пустым списком. Если да,
возвращаем nil. Если нет, то записываем первый элемент очереди в
переменную path. А первый элемент path - в переменную node.
Видимо, первый элемент queue должен быть списоком или хотя бы
точечной парой. Затем мы проверям, равны ли node и end.
Если равны, то возвращаем элементы path в обратном порядке, чтоб
показать, через какие узлы надо пройти для достижения цели.
Если нет, то рекурсивно вызываем bfs c конечной точкой,
склеенным списком, состоящим из остатка queue и результата
вызова new_paths (новая очередь/путь), и сетью.

#+BEGIN_SRC lisp

  (defun bfs (end queue net)
    (format t " BFS end ~a queue ~a  net ~a ~&" end queue net)
    (if (null queue)
        nil
        (let ((path (car queue)))
          (let ((node (car path)))
            (format t " BFS path ~a ~& " path)
            (if (eql node end)
                (format t " reverse path ~a ~&" (reverse path))
                (bfs end
                     (append (cdr queue)
                             (new-paths path node net))
                     net))))))

#+END_SRC

new-paths принимает три аргумента: путь, узел и саму сеть.
Дальше к каждому элементу списка (какого?) будет применено
(cons n path), где n - это результат от (cdr (assoc node net)).
Assoc ищет в ассоциативных списках пару, где встречается ключ.
Затем возьмем cdr от полученного списка, потому что пройденный
узел нам уже не интересует, и к остатку писка применим функцию
внутри mapcar. То есть возьмем каждый элемент полученного списка,
подставим его вместо n и присоединим его к path.

Так мы получим новый путь, а вернее сказать, новую очередь для
функции bfs.
#+BEGIN_SRC lisp

    (defun new-paths (path node net)
      (format t " NEW-PATHS path ~a node  ~a  net ~a ~&" path node net)
      (mapcar #'(lambda (n)
                  (cons n path))
              (cdr (assoc node net))))
  ;;Запуск:

  (let ((min '((a b c) (b c) (c d))))
    (shortest-path 'a 'd min))
#+END_SRC

* Chapter 4


** page 76

Функция реализует бинарный  поиск в отсортированном
одномерном массиве (векторе)

Функция bin-search принимает два аргумента:
искомый объект и массив (вектор)
Устанавливаем длину массива в len. Если длина массива != 0,
то вызываем функцию finder, передаем ей объект, массив, начальную
и конечную точки поиска.

#+BEGIN_SRC lisp

  (defun bin-search (obj vec)
    (let ((len (length vec)))
      (and (not (zerop len))
           (finder obj vec 0 (- len 1)))))

#+END_SRC

Вычитаем из конечной точки начальную, записываем результат в
range. Если range = 0, то проверяем, равен ли объект элементу
массива. Если да, то возвращаем объект. Если нет - значит, во
всем массиве ничего не нашлось. Данная ветка может сработать,
если поиск сократился до одного элемента.

В случае, если range != 0, то мы получаем середину (mid).
Получаем элемент вектора, соответствующий mid и записываем его в
obj2. Если искомый объект меньше, чем середина, то мы "сдвигаемся
влево", вызывая finder с (mid - 1) вместо конечной точки.
В противном случае мы проверям, больше ли объект середины. Если
да, то "сдвигаемся вправо", вызывает finder c (mid + 1) вмето
начальной точки. В противном случае возвращаем сам объект, т.к.
если он не больше и не меньше средины, значит, сереина = объект.

#+BEGIN_SRC lisp

(defun finder (obj vec start end)
    (let ((range (- end start)))
      (if (zerop range)
          (if (eql obj (aref vec start))
              obj
              nil)
          (let ((mid (+ start (round (/ range 2)))))
            (let ((obj2 (aref vec mid)))
              (if (< obj obj2)
                  (finder obj vec start (- mid 1))
                  (if (> obj obj2)
                      (finder obj vec (+ mid 1) end)
                      obj)))))))

#+END_SRC
** page 83

Функция tokens разберет нашу строку на знаки. Знаками считается
все, из чего может состоять строка: буквы, цифры, знаки
препинания и т.д.

Принимает строку, ключ и начальную точку.
Проверяем первый символ сроки на соответствие ключу. Если первый
символ найден, то ищем второй.
Когда нашли второй элемент (каким образом?), вызываем cons.
Cons содеинит нам строку от первого элемента до второго и
выхов tokens со вторым элементом в качестве начальной точки.
Если рекурсивный вызов ничего не дал, возвращаем nil.

Таким образом мы полчим все символы, удовлетворяющие условию.
#+BEGIN_SRC lisp

  (defun tokens (str test start)
    (let ((p1 (position-if test str :start start)))
      (if p1
          (let ((p2 (position-if #’(lambda (c)
                                     (not (funcall test c)))
                                   str :start p1)))
            (cons (subseq str p1 p2)
                  (if p2
                      (tokens str test p2)
                      nil)))
          nil)))

#+END_SRC

Функция принимает в качестве аргумента символ.
Проверет, явяется ли он буквой. Затем, проверяем,
не является ли он пробелом.
Если это буква и не пробел, возвращаем символ.

#+BEGIN_SRC lisp


  (defun constituent (c)
    (and (graphic-char-p c)
         (not (char= c #\ ))))

#+END_SRC


** page 84

Функция преобразует строку, содержащую число в само число.

Если вся строка состоит из цифр,
#+BEGIN_SRC lisp

  (defun read-integer (str)
    (if (every #’digit-char-p str)
        (let ((accum 0))
          (dotimes (pos (length str))
            (setf accum (+ (* accum 10)
                           (digit-char-p (char str pos)))))
          accum)
        nil))

#+END_SRC

** page 89

Создание дерева.
Создаем структуру с помощью defstruct, называем ее node (узел)
Указываем, что для печати node мы будем использовать format, который
выведет нам элемент, его правый и левый потомок.

#+BEGIN_SRC lisp

  (defstruct (node (:print-function
                    (lambda (n s d)
                      (format s "#<~A>" (node-elt n)))))
    elt (l nil) (r nil))

#+END_SRC

Bst-insert как cons для списков: создает новые узлы и объединяет их в
дерево.

Функция принимает 3 аргумента: объект, дерево и функция, с помощью
которой дерево будет упорядочено.

Если дерево пустое, то создаем экземпляр структуры node и в поле
elt записываем объект (видимо, остальные поля идентичны node).
Если же дерево не пустое, то мы создаем переменную elt и записываем
в нее node-elt(видимо, поле elt конкретного узла) и дерево (целиком? зачем?)
Проверяем, если объект равен элементу, то возвращаем дерево.
Если же не равен, то мы проверяем:
- объект меньше элемента?
Если да, то создаем новый экземпляр node, присваиваем полю elt
значение elt, поле l (левый потомок) получает значение от рекурсивного
вызова bst-insert (в качестве объекта левый потомок node, дерево и
оператор). В поле r (правый потомок) будет записано значение парвого
поля node и само дерево.
- если предыдущая ветка ифа не сработала, значит, объект больше
  элемента
Тогда мы опять записываем в поле elt значение elt, в правый потомок
будет записан рекурсивый вызов от bst-insert, а в левый - значение
поля l из node и дерево (зачем писать дерево?)


#+BEGIN_SRC lisp

  (defun bst-insert (obj bst <)
    (if (null bst)
        (make-node :elt obj)
        (let ((elt (node-elt bst)))
          (format t "~a ~&" node-elt)
          (if (eql obj elt)
              bst
              (if (funcall < obj elt)
                  (make-node
                   :elt elt
                   :l (bst-insert obj (node-l bst) <)
                   :r (node-r bst))
                  (make-node
                   :elt elt
                   :r (bst-insert obj (node-r bst) <)
                   :l (node-l bst)))))))

#+END_SRC

Запускать надо все вместе:

#+BEGIN_SRC lisp

  (defstruct (node (:print-function
                    (lambda (n s d)
                      (format s "#<NODE:~A{~A|~A}>"
                              (node-elt n)
                              (node-r n)
                              (node-l n)
                              ))))
    elt (l nil) (r nil))

  (make-node :elt "aaa" :l 123 :r 234)


  (defun bst-insert (obj bst sortfun)
    (if (null bst)
        (make-node :elt obj :r nil :l nil)
        ;; else
        (let ((elt (node-elt bst)))
          (format t "~a ~&" elt)
          (if (eql obj elt)
              bst
              (if (funcall sortfun obj elt)
                  (progn
                    (format t "<")
                    (format t " left true ~a ~&" (node-l bst))
                    (format t " right true ~a ~&" (node-r bst))
                    (make-node
                     :elt elt
                     :l (bst-insert obj (node-l bst) sortfun)
                     :r (node-r bst)))
                  ;; else
                  (format t ">")
                  ;; (make-node
                  ;;  :elt elt
                  ;;  :r (bst-insert obj (node-r bst) sortfun)
                  ;;  (format t "right false ~a ~&" (node-r bst))
                  ;;  :l (node-l bst)
                  ;;  (format t "left false ~a ~&" (node-l bst)))
                  ))
          )))

  ;; (let ((nums))
  ;;   (dolist (x '(5 8 4 2 1 9 6 7 3))
  ;;     (setf nums (bst-insert x nums #'<))))


  (let ((var1 nil))
    (let ((var2 (bst-insert 1 var1 #'<)))
      (bst-insert 2 var2 #'<)))

  C-c ' ;; open code
  C-x e ;; execute
#+END_SRC

Bst-find ищет элемент в дереве и если находит,
то возвращает его поддерево. В противном случае возвращается nil.

Если дерево пустое, возвращаем nil.
В противном случае записываем в переменную elt узел дерева. Проверяем,
является ли искомый объект элементом из узла. Если да, то возвращаем
поддерево. Если нет, то рекурсивно вызываем bst-find в зависимости от
того, какая ветка ифа сработала.

#+BEGIN_SRC lisp

  (defun bst-find (obj bst <)
    (if (null bst)
        nil
        (let ((elt (node-elt bst)))
          (if (eql obj elt)
              bst
              (if (funcall < obj elt)
                  (bst-find obj (node-l bst) <)
                  (bst-find obj (node-r bst) <))))))

#+END_SRC


#+BEGIN_SRC lisp

  (defun bst-remove (obj bst <)
    (if (null bst)
        nil
        (let ((elt (node-elt bst)))
          (if (eql obj elt)
              (percolate bst)
              (if (funcall < obj elt)
                  (make-node
                   :elt elt
                   :l (bst-remove obj (node-l bst) <)
                   :r (node-r bst))
                  (make-node
                   :elt elt
                   :r (bst-remove obj (node-r bst) <)
                   :l (node-l bst)))))))

#+END_SRC

* Chapter 5

#+BEGIN_SRC lisp

  (let ((x ’a))
    (do ((x 1 (+ x 1))
         (y x x))
        ((> x 5))
      (format t "(~A ~A) " x y)))

  (defun show-squares (start end)
    (do ((i start (+ i 1)))
        ((> i end) ’done)
      (format t "~A ~A~%" i (* i i))))

#+END_SRC

#+BEGIN_SRC lisp
  ;; устанавливаем константы
  ;; этот вектор показывает, сколько дзней проходит от начала года
  ;; до соответствующего месяца
  (defconstant month
    #(0 31 59 90 120 151 181 212 243 273 304 334 365))

  ;; устанваливаем константу yzerop
  ;; ее значение - двухтычатный год

  (defconstant yzero 2000)

  ;; функция leap? принимает год в качестве параметра и проверяет,
  ;; не високосный ли он
  ;; год високосный если:
  ;; - кратен 4
  ;; - либо кратен 400 или не кратен 100

  (defun leap? (y)
    (and (zerop (mod y 4))
         (or (zerop (mod y 400))
             (not (zerop (mod y 100))))))

  ;; преобразовывает дату в целое число
  ;; функция принимает день, месяц и год
  ;; складываем день (со вчерашнего дня), соответствующий месяц, прибавив к нему 1,
  ;; если год високосный и искомый месяц после февраля, и количество дней от двухтысячного
  ;; года до первого января текущего года

  (defun date->num (d m y)
    (+ (- d 1) (month-num m y) (year-num y)))

  ;; отнимаем от месяца один, чтоб не считать текущий месяц,
  ;; если год високосный, прибавляем к количеству дней, если нет, то 0

  (defun month-num (m y)
    (+ (svref month ( - m 1))
       (if (and (> m 2) (leap? y))
           1
           0)))

  (defun year-num (y)
    (let ((d 0))
      (if (>= y yzero)
          (dotimes (i (- y yzero)
                    (incf d (year-days (+
                                        (dotimes (i (- yzero y)
                                                  (incf d (year-days (+
                                                                      d)
                                                                     yzero i))))
                                        (- d))
                                       y i)))))))
  (defun year-days (y) (if (leap? y) 366 365))
#+END_SRC
* Chapter 6

#+BEGIN_SRC lisp
  ;;Функция может принимать любое количество аргументов (все они будут загружены в fns
  ;; благодаря &rest)



  (defun compose (&rest fns)
    (destructuring-bind (fn1 . rest) (reverse fns)
      #’(lambda (&rest args)
          (reduce #’(lambda (v f) (funcall f v))
                    rest
                    :initial-value (apply fn1 args)))))

  (defun disjoin (fn &rest fns)
    (if (null fns)
        fn
        (let ((disj (apply #’disjoin fns)))
          #’(lambda (&rest args)
              (or (apply fn args) (apply disj args))))))
  (defun conjoin (fn &rest fns)
    (if (null fns)
        fn
        (let ((conj (apply #’conjoin fns)))
          #’(lambda (&rest args)
              (and (apply fn args) (apply conj args))))))
#+END_SRC

* Chapter 7

Почему потоки у read-line и format различаются?
Зачем  (read-line str nil 'eof) написано дважды?

#+BEGIN_SRC lisp

  ;; функция печатает файл
  ;; аргумент - файл, который надо распечатать построчно
  (defun pseudo-cat (file)
    ;; открываем поток для чтения файла (и сам файл ?)
    (with-open-file (str file :direction :input)
      ;; запускаем цикл, который будет грузить в переменную line
      ;; каждую строку файла по очереди
      ;; условие завершения цикла: line = eof (?)
      (do ((line (read-line str nil 'eof)
                 (read-line str nil 'eof)))
          ((eql line 'eof))
        ;; вывод строки
        (format t "~A~%" line))))


#+END_SRC

#+BEGIN_SRC lisp

  ;; создаем структуру buf
  ;; ее поля - это ветор и его индексы (поэтому все значения - 1, индекс начинается с нуля)
  (defstruct buf
    vec (start -1) (used -1) (new -1) (end -1))

  ;; bref позволяет получить значение по заданному индексу
  (defun bref (buf n)
    ;; получаем вектор из поля структуры и индекс, поделив заданный индекс на размер буфера
    ;; зачем делить?), и все это передаем svref, что  вернет элемент
    (svref (buf-vec buf)
           (mod n (length (buf-vec buf)))))

  ;; обратная операция: кладем элемент по индексу
  (defun (setf bref) (val buf n)
    (setf (svref (buf-vec buf)
                 (mod n (length (buf-vec buf))))
          val))
  ;; создаем кольцевой буфер заданного размера
  (defun new-buf (len)
    (make-buf :vec (make-array len)))

  ;; функция добавляет элемент к буферу, аргументы: элемент и буфер
  ;; сначала передаем функции bref буфер и инкрементированный индекс end, затем setf запишет
  ;; по этому индексу значение x
  (defun buf-insert (x b)
    (setf (bref b (incf (buf-end b))) x))

  ;; обратная операция: стираем элемент из вектора
  (defun buf-pop (b)
    (prog1
        (bref b (incf (buf-start b)))
      (setf (buf-used b) (buf-start b)
            (buf-new b) (buf-end b))))

  ;; чтение следующего элемента из буфера без его извлечения
  (defun buf-next (b)
    (when (< (buf-used b) (buf-new b))
      (bref b (incf (buf-used b)))))

#+END_SRC


#+BEGIN_SRC lisp

  ;; file-subst принимает на вход 4 аргумента:
  ;; строку, подлежащую замене, строку, которая заменит старую, файл,
  ;; входной и выходной файлы.
  (defun file-subst (old new file1 file2)
    ;; открываеv потоки между файлами: читаем из  file1, пишем в file2
    (with-open-file (in file1 :direction :input)
      (with-open-file (out file2 :direction :output
                           :if-exists :supersede)
        ;; вызываем алгоритм замены строк
        (stream-subst old new in out))))

  (defun stream-subst (old new in out)
    ;; устанавливаем переменные: позицию, длину старой строки, новый буфер,
    ;; (что такое from-buf ?)
    (let* ((pos 0)
           (len (length old))
           (buf (new-buf len))
           (from-buf nil))
      ;; в переменную цикла "с" записывается символ из файла in,
      ;; условие завершения цикла - конец файла. Зачем тут or?
      (do ((c (read-char in nil :eof)
              (or (setf from-buf (buf-next buf))
                  (read-char in nil :eof))))
          ((eql c :eof))
        ;; если "с" равен букве на заданном индексе из старой строки, тогда инекрементируем
        ;; pos и проверяем, не сравнялся ли pos  с длиной старой строки (тогда мы дошли до ее
        ;; конца)
        ;; если дошли: печатаем новую стоку в вывод, обнуляем pos, очищаем буфер
        ;; не понятно, что с from-buf. Видимо, если pos != len, то мы добавим символ в буфер
        ;; и продолжим сравнивать дальше
        (cond ((char= c (char old pos))
               (incf pos)
               (cond ((= pos len)
                                          ; 3
                      (princ new out)
                      (setf pos 0)
                      (buf-clear buf))
                     ((not from-buf)
                                          ; 2
                      (buf-insert c buf))))
              ;; если pos = 0
              ;; выводим символ в файл out (зачем?!)
              ((zerop pos)
                                          ; 1
               (princ c out)
               ;; дальше не понятно ничего
               (when from-buf
                 (buf-pop buf)
                 (buf-reset buf)))
              (t
                                          ; 4
               (unless from-buf
                 (buf-insert c buf))
               (princ (buf-pop buf) out)
               (buf-reset buf)
               (setf pos 0))))
      (buf-flush buf out)))

#+END_SRC
